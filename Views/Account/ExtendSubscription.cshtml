@model ePaperLive.Models.SubscriptionDetails

@{
    ViewBag.Title = "Extend or Add Subscription";
    if (ViewData["savedAddressData"] != null)
    {
        @Html.Hidden("mailingAddress", ViewData["savedAddressData"].ToString())
    }


}
<style>
    textarea {
        width: 100%
    }
</style>

<div id="main">

    <!-- ======= Breadcrumbs ======= -->
    <section id="breadcrumbs" class="breadcrumbs">
        <div class="container">

            <ol>
                <li><a href="@Url.Action("dashboard", "account")">Home</a></li>
                <li>@ViewData["Title"]</li>
            </ol>
            <h2>@ViewData["Title"]</h2>

        </div>
    </section><!-- End Breadcrumbs -->
    <!-- ======= Wizard Breadcrumbs ======= -->
    <div class="container form-header d-flex mb-4 mt-4">
        <span class="stepIndicator active">Choose Subscription</span>
        <span class="stepIndicator">Payment</span>
    </div><!-- End Wizard Breadcrumbs -->
    <!-- ======= Wizard Section ======= -->
    <section id="portfolio-details" class="portfolio-details">
        <div class="container">

            <div class="row gy-4">
                <div class="col-lg-8">

                    <!-- start:wizrd -->
                    @using (Html.BeginForm("ExtendSubscription", "Account", FormMethod.Post, new { @class = "row g-3 needs-validation", novalidate = "novalidate", name = "extendsubdetails" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            <h4>Choose from one of our subscription options</h4>
                            <hr />
                            @*@Html.Partial("_Rates", Model)*@

                            <br />
                            <div id="search-form">
                                <div class="plans pb-3">
                                    <div class="row justify-content-md-center">
                                        <div class="col-lg-3 col-sm-4 p-2">@Html.RadioButtonFor(x => x.RateType, "Epaper", htmlAttributes: new { @autocomplete = "off", @id = "ePaper" })<label for="ePaper">ePaper Edition</label></div>
                                        <div class="col-lg-3 col-sm-4 p-2">@Html.RadioButtonFor(x => x.RateType, "Print", htmlAttributes: new { @autocomplete = "off", @id = "Print" })<label for="Print">Print Edition</label></div>
                                        <div class="col-lg-3 col-sm-4 p-2">@Html.RadioButtonFor(x => x.RateType, "Bundle", htmlAttributes: new { @autocomplete = "off", @id = "Bundle" })<label for="Bundle">Print & ePaper Bundle</label></div>
                                    </div>
                                </div>
                                @* @Html.Action("GetRatesList", "Account")*@
                            </div>
                            <div class="container pb-3" id="rates-results" style="display:none;">
                                <p>Loading...</p>

                            </div>
                            @Html.HiddenFor(m => m.RateID, new { @class = ".do-not-ignore" })
                            @Html.HiddenFor(model => model.RateType, new { @id = "rateTypeHidden" })
                            @Html.HiddenFor(model => model.StartDate, new { @id = "startDateHidden" })

                            <div class="form-group p-2" id="del-address" style="display: none">
                                <hr />
                                <div class="row justify-content-md-center">
                                    <div class="col-lg-12">
                                        <button type="button" class="btn-sign-in" data-bs-toggle="modal" data-bs-target="#delivery-address">Add delivery address</button>
                                        <div id="del-address-details" style="display:none;"></div>
                                    </div>
                                </div>
                            </div>

                            <div id="delAddressDetails"> </div>

                            <div class="form-group p-2" id="del-instructions" style="display: none">
                                @Html.LabelFor(model => model.DeliveryInstructions, htmlAttributes: new { @class = "form-label " })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.DeliveryInstructions, new { htmlAttributes = new { @class = "form-control", @rows = 5 } })
                                </div>
                                <hr />

                            </div>

                            <div class="form-group p-2">
                                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label fw-bold" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.StartDate, "", new { htmlAttributes = new { @class = "form-control", maxlength = 10, @required = "required" } })
                                </div>
                            </div>


                            @Html.ValidationSummary(false, "", new { @class = "text-danger" })

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-12 pt-3">
                                    <div class="row">
                                        <div class="col-6">
                                            <input type="submit" value="Prev" name="prevBtn" class="btn btn-sign-in bx-pull-left" />
                                        </div>
                                        <div class="col-6">
                                            <input type="submit" value="Next" name="nextBtn" class="btn btn-sign-in bx-pull-right" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <input type="hidden" id="AddressAdded" />
                    }
                    <!-- end:wizrd -->
                    <!-- Delivery Modal -->
                    @{Html.RenderPartial("_DeliveryAddressModal"); }
                    <!-- end: Delivery Modal -->
                </div>
                <div class="col-lg-4">
                    <div class="portfolio-info">
                        <h3>Subscription: <span class="text-success">Active</span> </h3>
                        @if (ViewBag.plans != null)
                        {
                            foreach (var item in (List<ePaperLive.Models.SubscriptionDetails>)ViewBag.plans)
                            {
                                <p>@item.RateDescription</p>
                                <small>
                                    <strong>Start:</strong> @Convert.ToDateTime(item.StartDate).ToString("dd MMMM yyyy") <br />
                                    <strong>End:&nbsp;&nbsp;</strong> @Convert.ToDateTime(item.EndDate).ToString("dd MMMM yyyy") <br />
                                    <!-- <a href="#">Cancel</a> -->
                                </small>

                            }
                        }
                        <br />

                    </div>
                </div>


                @if ((Dictionary<string, int>)ViewData["preloadSub"] != null)
                {
                    var preloadSub = (Dictionary<string, int>)ViewData["preloadSub"];
                    foreach (var plans in preloadSub)
                    {
                        @Html.Hidden("preloadPlan", plans.Key.Split('|')[0])
                        @Html.Hidden("preloadRate", plans.Value)
                        @Html.Hidden("preloadRateDesc", plans.Key.Split('|')[2])

                    }
                }

            </div>

        </div>
    </section><!-- End Wizard Section -->

</div><!-- End #main -->


@section scripts{
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <script>
        // extend range validator method to treat checkboxes differently
        var defaultRangeValidator = $.validator.methods.range;
        $.validator.methods.range = function (value, element, param) {
            if (element.type === 'checkbox') {
                // if it's a checkbox return true if it is checked
                return element.checked;
            } else {
                // otherwise run the default validation function
                return defaultRangeValidator.call(this, value, element, param);
            }
        }
    </script>
    <script>
        $('#loading').addClass('loading').removeClass('hidden');

        let prePlan = $("#rateTypeHidden").val();
        let preRate = $("#RateID").val();
        let preRateDesc = $("#preloadRateDesc").val();
        let startDate = $("#startDateHidden").val();
        console.log(startDate);
        let currentDate = moment(startDate).format('YYYY-MM-DD');
        let today = moment().format('YYYY-MM-DD');
        let tomorrow = moment().add(1, 'days').format('YYYY-MM-DD');

        function selectRate() {
            if (preRateDesc) {
                if (prePlan == "Print") {
                     $('div[id=' + preRateDesc + ']').addClass('show');
                }
            }

            $('[name=RateID][value=' + preRate + ']').click();
        }

        function selectPlan() {
            $('[name=RateType][value=' + prePlan + ']').click();
        }

        $(document).ready(function () {
            $('#loading').addClass('hidden').removeClass('loading');

            if (prePlan) {
                //select preloaded plan
                setTimeout(
                selectPlan
                , 500);
            }

            let rateType;

            $('[name=extendsubdetails]').submit(function (event) {

                let rateType = $('[name=RateType]:checked').val();
                let deliveryAddress = $("#AddressAdded").val();

                 if(!$('[name=RateType]').is(':checked')) {

                   swal({
                      title: "Error!",
                       text: "Please select a subscription plan to proceed",
                      type: "warning",
                      dangerMode: true
                   });

                    return false;
                }

                if (rateType != "Epaper" && !deliveryAddress ) {
                    swal({
                      title: "Error!",
                       text: "Please enter a delivery address to proceed",
                      type: "warning",
                      dangerMode: true
                   });

                    return false;
                }

                if ($('[name=RateType]').is(':checked')) {
                     let formData = $("[name=extendsubdetails]").valid();
                     if (formData) {
                         $('#loading').addClass('loading').removeClass('hidden');
                    }
                }
              });

            $("[name=StartDate]").on('change', function (e) {

                let givenDate = $(this).val();
                givenDate = moment(givenDate);

                if (givenDate.isBefore(currentDate)) {
                    swal({
                        title: "Error!",
                        text: "Please select a subscription date in the future or today",
                        type: "warning",
                        dangerMode: true
                    });

                    $(this).val(currentDate);

                    return false;
                } else {
                    let splitDate = $(this).val().split('-');
                    let summaryDateText = ': ' + givenDate.format('DD/MM/yyyy');
                    $("#subStartDate").html(summaryDateText);
                }

            });

            $('[name=RateType]').on("click", function () {
                rateType = $(this).val();
                //console.log($(this).val());

                if (rateType != prePlan) {
                    if (rateType == "Epaper") {
                        currentDate = today;
                        $("[name=StartDate]").val(today);

                    } else {
                        currentDate = tomorrow;
                        $("[name=StartDate]").val(tomorrow);
                    }
                } else {
                    $("[name=StartDate]").val(moment(startDate).format('YYYY-MM-DD'));
                }

                if (rateType != "Epaper") {
                    $("#del-address").show();
                    $("#del-instructions").show();
                    $("#deliveryAddressForm").show();
                    $("#deliveryAddressForm :input:not(#DeliveryAddress_AddressLine2):not([name=SameAsMailing])").attr("required", "required");
                } else {
                    $("#del-address").hide();
                    $("#del-instructions").hide();
                    $("#deliveryAddressForm").hide();
                    $("#deliveryAddressForm :input:not(#DeliveryAddress_AddressLine2):not([name=SameAsMailing])").removeAttr('required');
                }

                $("[name=StartDate]").trigger("change");
            });

            $("[name=RateType]").click(function (e) {
                $("#rates-results").show();
                var rateType = $(this).val();
                e.preventDefault();
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetRatesList", "Account")',
                    data: { rateType: rateType },
                    success: function (result) {
                        //console.log(result);
                        $("#rates-results").html(result);
                        $("input[name=RateType][value=" + rateType + "]").prop('checked', true);

                        if (preRate) {
                            setTimeout(
                                selectRate
                                , 500);
                        }
                    }
                });
            });

            $("[name=deliveryAddressForm]").on('submit', function (e) {
                e.preventDefault();
                let formData = $("[name=deliveryAddressForm]").valid();

                if (formData) {
                    //Serialize the form datas.   
                    var addressData = $("[name=deliveryAddressForm] :input").serialize();
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("SaveDeliveryAddress", "Account")',
                        dataType: 'json',
                        data: addressData,
                        success: function (result) {
                            sessionStorage.setItem("delAddress", JSON.stringify(result));
                            var addressLine2 = result.AddressLine2 ? `${result.AddressLine2}<br>` : '';
                            var html = `<p class="p-3">${result.AddressLine1}<br>
                                            ${addressLine2}
                                            ${result.CityTown}<br>
                                            ${result.StateParish}<br>
                                        </p>`;
                            $("#AddressAdded").val("added");
                            $("#delAddressDetails").html(html);
                        }
                    });
                }

            });

            // Event delegation, waits until the elements are loaded on the page
            $("#rates-results").on("click", "[name=RateID]", function (e) {
                let rateDesc = $(this).parent().children().children().first().text();
                let plan = e.target.dataset;
                var desc = rateDesc.split("|")[0];
                var freq = rateDesc.split("|")[1];

                var frequency = rateDesc.split("|")[1] ? '<small>' + rateDesc.split("|")[1] + '</small>' : '';
                let rateType = plan.rateType + '|' + desc + '|' + plan.rateDesc + '|' + plan.ratePrice + '|' + freq;
                let rateId = plan.subId;


                $.ajax({
                    type: "POST",
                    url: '@Url.Action("PreloadSubscription", "Home")',
                    data: { rateType: rateType, rateId: rateId },
                    success: function (result) {
                        var html = '<strong>' + plan.rateType.toUpperCase() + ' SUBSCRIPTION</strong><br />' + desc + '<br />' + frequency + '<p class="pt-1 text-success fw-semibold fs-3">' + plan.ratePrice + '</p>';
                        $("#subSummary").html(html);
                    }
                });
            });


        });


        let address;
        var mailAddress = $('#mailingAddress').val();

        if (mailAddress) {
            address = JSON.parse(mailAddress);
        }

         $("#SameAsMailing").click(() => {
            if ($("#SameAsMailing").is(":checked")) {

                if ($('#mailingAddress').val()) {
                    $("#DeliveryAddress_AddressLine1").val(address.AddressLine1);
                    $("#DeliveryAddress_AddressLine2").val(address.AddressLine2);
                    $("#DeliveryAddress_CityTown").val(address.CityTown);
                    $("#DeliveryAddress_CityTown").val(address.CityTown).trigger('change');
                    $("#DeliveryAddress_StateParish").val(address.StateParish);
                    $("#DeliveryAddress_ZipCode").val(address.ZipCode);
                    $("#DeliveryAddress_CountryCode").val(address.CountryCode);
                }
            }
            else {
                $("#DeliveryAddress_AddressLine1").val("");
                $("#DeliveryAddress_AddressLine2").val("");
                $("#DeliveryAddress_CityTown").val("");
                $("#DeliveryAddress_CityTown").val("").trigger('change');
                $("#DeliveryAddress_StateParish").val("");
                $("#DeliveryAddress_ZipCode").val("");
                $("#DeliveryAddress_CountryCode").val("");
            }
         })
        //});
    </script>
}
