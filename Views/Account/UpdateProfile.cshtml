@model ePaperLive.Models.AuthSubcriber

@{
    ViewBag.Title = "Update Profile";
}

<!-- ======= Breadcrumbs ======= -->
<section id="breadcrumbs" class="breadcrumbs">
    <div class="container">

        <ol>
            <li><a href="@Url.Action("dashboard", "account")">Home</a></li>
            <li>@ViewData["Title"]</li>
        </ol>
        <h2>@ViewData["Title"]</h2>

    </div>
</section><!-- End Breadcrumbs -->
<!-- ======= Wizard Section ======= -->
<section id="portfolio-details" class="portfolio-details">
    <div class="container">

        <div class="row gy-4">
            <div class="col-lg-8">
                <!-- left-col -->
                <div class="container main">

                    @using (Html.BeginForm("UpdateProfile", "Account", FormMethod.Post, new { @class = "row g-3 needs-validation", novalidate = "novalidate" }))
                    {
                        @Html.AntiForgeryToken()

                        <div class=" row form-horizontal">
                            <h4>Personal Details</h4>
                            <hr />
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                            <div class="offset-md-1 col-md-5 p-2">
                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" })*@
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @required = "required", placeholder = Html.DisplayNameFor(model => model.FirstName) } })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-5 p-2">
                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label" })*@
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @required = "required", placeholder = Html.DisplayNameFor(model => model.LastName) } })
                                    </div>
                                </div>
                            </div>


                            <div class="form-group p-2">
                                @*@Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "control-label col-md-4" })*@
                                <div class="offset-md-1 col-md-5">
                                    @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control", @required = "required", @readonly = "readonly", placeholder = Html.DisplayNameFor(model => model.EmailAddress) } })
                                </div>
                            </div>


                            <div class="row form-horizontal py-3">
                                <h4>Mailing address </h4>
                                <hr />
                                <div class="offset-md-1 form-group">
                                    @*@Html.LabelFor(model => model.AddressLine1, htmlAttributes: new { @class = "control-label" })*@
                                    <div class="col-md-10 p-2">
                                        @Html.EditorFor(model => model.AddressDetails[0].AddressLine1, new { htmlAttributes = new { @class = "form-control", @required = "required", placeholder = Html.DisplayNameFor(model => model.AddressDetails[0].AddressLine1) } })
                                        @*@Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })*@
                                    </div>
                                </div>

                                <div class="offset-md-1 form-group ">
                                    @*@Html.LabelFor(model => model.AddressLine2, htmlAttributes: new { @class = "control-label" })*@
                                    <div class="col-md-10 p-2">
                                        @Html.EditorFor(model => model.AddressDetails[0].AddressLine2, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.AddressDetails[0].AddressLine2) } })
                                        @*@Html.ValidationMessageFor(model => model.AddressLine2, "", new { @class = "text-danger" })*@
                                    </div>
                                </div>
                                <div class="offset-md-1 col-md-5">
                                    <div class="form-group p-2">
                                        @*@Html.LabelFor(model => model.CityTown, htmlAttributes: new { @class = "control-label " })*@
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.AddressDetails[0].CityTown, new { htmlAttributes = new { @class = "form-control", @required = "required", placeholder = Html.DisplayNameFor(model => model.AddressDetails[0].CityTown) } })
                                            <select id="CityTownList" class="form-control pb-sm-3 hidden" name="CityTown" aria-label="District" required="required">
                                                <option>Select a District</option>>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group p-2">
                                        @*@Html.LabelFor(model => model.StateParish, htmlAttributes: new { @class = "control-label " })*@
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.AddressDetails[0].StateParish, new { htmlAttributes = new { @class = "form-control", @required = "required", placeholder = Html.DisplayNameFor(model => model.AddressDetails[0].StateParish) } })
                                            @Html.DropDownList("StateParish", ViewBag.Parishes as SelectList, "Select a parish", new { @class = "form-control", id = "StateParishList", @required = "required", @style = "display: none" })
                                            @*@Html.ValidationMessageFor(model => model.StateParish, "", new { @class = "text-danger" })*@
                                        </div>
                                    </div>
                                </div>

                                <div class="offset-md-1 col-md-5">
                                    <div class="form-group p-2">
                                        @*@Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label " })*@
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.AddressDetails[0].ZipCode, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.AddressDetails[0].ZipCode) } })
                                            @*@Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })*@
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group p-2">
                                        @*@Html.LabelFor(model => model.CountryCode, htmlAttributes: new { @class = "control-label " })*@
                                        <div class="col-md-10">
                                            @if (ViewBag.CountryList != null)
                                            {
                                                @*@Html.ValidationMessageFor(model => model.CountryCode, "", new { @class = "text-danger" })*@
                                                @Html.DropDownListFor(model => model.AddressDetails[0].CountryCode, ViewBag.CountryList as List<SelectListItem>, "Select Country", new { @class = "form-control", @required = "required" })
                                            }
                                        </div>
                                    </div>
                                </div>

                                <div class="offset-md-1 form-group p-3">
                                    @*@Html.LabelFor(model => model.phone, htmlAttributes: new { @class = "control-label " })*@
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.AddressDetails[0].Phone, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.AddressDetails[0].Phone) } })
                                        @*@Html.ValidationMessageFor(model => model.phone, "", new { @class = "text-danger" })*@
                                    </div>
                                </div>
                                <small>Your information will be used in accordance with our <a href="#">Privacy</a>, and may be used to contact you if you do not complete your purchase to check if you need any support.</small>


                            </div>




                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Update Profile" class="btn btn-sign-in" />
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <!-- end:left-col -->
            </div>
            <div class="col-lg-4">
                <div class="portfolio-info">
                    <h3>Current Subscription: <span class="text-success">Active</span> </h3>
                    @if (ViewBag.plans != null)
                    {
                        foreach (var item in (List<ePaperLive.Models.SubscriptionDetails>)ViewBag.plans)
                        {
                            <p>@item.RateDescription</p>
                            <small>
                                <strong>Start:</strong> @Convert.ToDateTime(item.StartDate).ToString("dd MMMM yyyy") <br />
                                <strong>End:&nbsp;&nbsp;</strong> @Convert.ToDateTime(item.EndDate).ToString("dd MMMM yyyy") <br />
                                <!-- <a href="#">Cancel</a> -->
                            </small>

                        }
                    }
                    <br />

                </div>

            </div>
        </div>
    </div>
</section>
<script>
    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (() => {
        'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        const forms = document.querySelectorAll('.needs-validation')

        // Loop over them and prevent submission
        Array.from(forms).forEach(form => {
            form.addEventListener('submit', event => {
                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }

                form.classList.add('was-validated')
            }, false)
        })
    })();

</script>
@section scripts{
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <script>

        $(document).ready(function () {
            var parish = $("#StateParishList").val();
            $("#StateParish").val(parish).trigger('change');
        });

        let countryCode = $('#CountryCode').val();

        if (countryCode == "JAM") {
            $('#StateParishList').show();
            $('#StateParishList').attr('required', true);
            $('#StateParish').hide();
            $('#ZipCode').attr('disabled', true);
        } else {
            $('#StateParishList').hide();
            $('#StateParishList').removeAttr('required');
            $('#StateParish').show();
            $('#ZipCode').attr('disabled', false);
        }

        $('#CountryCode').on('change', (e) => {
            console.log($('#CountryCode').val());
            countryCode = $('#CountryCode').val();

            if (countryCode == "JAM") {
                $('#StateParishList').show();
                $('#StateParishList').attr('required', true);
                $('#StateParish').hide();
                $('#ZipCode').attr('disabled', true);
            } else {

                $('#StateParishList').hide();
                $('#StateParishList').removeAttr('required');

                $('#StateParish').show();
                $('#ZipCode').attr('disabled', false);
            }
        });

        $('#StateParishList').on('change', (e) => {
            $('#StateParish').val($('#StateParishList option:selected').text());
        });



        $('[name=AddressDetails]').on('submit', (e) => {
            let formData = $("[name=AddressDetails]").valid();
            if (formData) {
                $('#loading').addClass('loading').removeClass('hidden');
                return true;
            }
        });

        let phoneNumber = new Cleave('#Phone', {
            phone: true,
            phoneRegionCode: 'JM'
        });


    </script>
}
