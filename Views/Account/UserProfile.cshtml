@model ePaperLive.Models.UserProfile

@{
    ViewBag.Title = "Profile";
}
<!-- ======= Breadcrumbs ======= -->
<section id="breadcrumbs" class="breadcrumbs">
    <div class="container">

        <ol>
            <li><a href="@Url.Action("dashboard", "account")">Home</a></li>
            <li>@ViewData["Title"]</li>
        </ol>
        <h2>@ViewData["Title"]</h2>

    </div>
</section><!-- End Breadcrumbs -->
<!-- ======= Wizard Section ======= -->
<section id="portfolio-details" class="portfolio-details">
    <div class="container">

        <div class="row gy-4">
            <div class="col-lg-8">
                <!-- left-col -->
                <div class="container main">

                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <h4>Update your information below</h4>
                        <hr />
                        <h2 class="text-success">@ViewBag.msg</h2>
                        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.SubscriberID)

                        <div class="form-group p-2">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group p-2">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group p-2">
                            @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DisplayFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.EmailAddress)

                            </div>
                        </div>


                        @Html.HiddenFor(model => model.isActive)

                        <div class="form-group p-2">
                            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        @Html.HiddenFor(model => model.AddressID)

                        <div class="form-group p-2">
                            @Html.LabelFor(model => model.AddressLine1, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.AddressLine1, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group p-2">
                            @Html.LabelFor(model => model.AddressLine2, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.AddressLine2, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AddressLine2, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group p-2">
                            @Html.LabelFor(model => model.CityTown, htmlAttributes: new { @class = "control-label " })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.CityTown, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.CityTown) } })
                                <select id="CityTownList" class="form-control pb-sm-3 hidden" name="CityTown" aria-label="District" required="required">
                                    <option>Select a District</option>>
                                </select>
                            </div>
                        </div>

                        <div class="form-group p-2">
                            @Html.LabelFor(model => model.StateParish, htmlAttributes: new { @class = "control-label " })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.StateParish, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.StateParish) } })
                                @Html.DropDownList("StateParish", ViewBag.Parishes as SelectList, "Select a parish", new { @class = "form-control", id = "StateParishList", @style = "display: none" })
                                @*@Html.ValidationMessageFor(model => model.StateParish, "", new { @class = "text-danger" })*@
                                @Html.Hidden("stateParish", Model.StateParish)

                            </div>
                        </div>

                        <div class="form-group p-2">
                            @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group p-2">
                            @Html.LabelFor(model => model.CountryCode, htmlAttributes: new { @class = "control-label " })
                            <div class="col-md-10">
                                @if (ViewBag.CountryList != null)
                                {
                                    @*@Html.ValidationMessageFor(model => model.CountryCode, "", new { @class = "text-danger" })*@
                                    @Html.DropDownListFor(model => model.CountryCode, ViewBag.CountryList as List<SelectListItem>, "Select Country", new { @class = "form-control", @required = "required" })
                                    @Html.Hidden("country", Model.CountryCode)
                                }
                            </div>
                        </div>
                        <div class="form-group p-2">
                            @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <input type="hidden" id="profileUpdated" value="@ViewBag.ProfileUpdate" />

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Update Profile" class="btn btn-sign-in" />
                            </div>
                        </div>
                    </div>
                    }

                </div>
                <!-- end:left-col -->
            </div>
            <div class="col-lg-4">
                <div class="portfolio-info">
                    @{

                        var plans = (List<ePaperLive.Models.SubscriptionDetails>)ViewBag.plans;

                        var stat = (plans.Where(x => x.isActive == true).Count() > 0) ? "<span class=\"text-success\">Active</span>" : "<span class=\"text-danger\">Inactive</span>";
                    }
                    <h3>Current Subscription: @Html.Raw(stat) </h3>
                    @if (ViewBag.plans != null)
                    {
                        foreach (var item in (List<ePaperLive.Models.SubscriptionDetails>)ViewBag.plans)
                        {
                            if (item.isActive)
                            {
                                <p>@item.RateDescription</p>
                                <small>
                                    <strong>Start:</strong> @Convert.ToDateTime(item.StartDate).ToString("dd MMMM yyyy") <br />
                                    <strong>End:&nbsp;&nbsp;</strong> @Convert.ToDateTime(item.EndDate).ToString("dd MMMM yyyy") <br />
                                    <!-- <a href="#">Cancel</a> -->
                                </small>
                            }
                        }
                    }
                    <br />

                </div>

            </div>
        </div>
    </div>
</section>
@section scripts{
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <script>
            console.log($("#stateParish").val());

        $(document).ready(function () {
            var parish = $("#stateParish").val();
            //var parish = $("#StateParishList").val();
            //$("#StateParish").val(parish).trigger('change');
            //console.log($("#StateParish").val());
            $("#StateParishList option:contains(" + parish + ")").attr('selected', 'selected');
        });

        let countryCode = $('#country').val();
        $('#CountryCode').val(countryCode);

        if (countryCode == "JAM") {
            $('#StateParishList').show();
            $('#StateParishList').attr('required', true);
            $('#StateParish').hide();
            $('#ZipCode').attr('disabled', true);
        } else {
            $('#StateParishList').hide();
            $('#StateParishList').removeAttr('required');
            $('#StateParish').show();
            $('#ZipCode').attr('disabled', false);
        }

        $('#CountryCode').on('change', (e) => {
            console.log($('#CountryCode').val());
            countryCode = $('#CountryCode').val();

            if (countryCode == "JAM") {
                $('#StateParishList').show();
                $('#StateParishList').attr('required', true);
                $('#StateParish').hide();
                $('#ZipCode').attr('disabled', true);
            } else {

                $('#StateParishList').hide();
                $('#StateParishList').removeAttr('required');

                $('#StateParish').show();
                $('#ZipCode').attr('disabled', false);
            }
        });

        $('#StateParishList').on('change', (e) => {
            $('#StateParish').val($('#StateParishList option:selected').text());
        });



        $('[name=AddressDetails]').on('submit', (e) => {
            let formData = $("[name=AddressDetails]").valid();
                if (formData) {
                    $('#loading').addClass('loading').removeClass('hidden');
                    return true;
            }
        });

      


    </script>
}