@model ePaperLive.Models.AuthSubcriber

@{
    ViewBag.Title = "Add Subscriber";
}

<div id="main">

    <!-- ======= Breadcrumbs ======= -->
    <section id="breadcrumbs" class="breadcrumbs">
        <div class="container">

            <ol>
                <li><a href="@Url.Action("index", "home")">Home</a></li>
                <li>@ViewData["Title"]</li>
            </ol>
            <h2>@ViewData["Title"]</h2>

        </div>
    </section><!-- End Breadcrumbs -->
    <!-- ======= Wizard Section ======= -->
    <section id="portfolio-details" class="portfolio-details">
        <div class="container">
            @using (Html.BeginForm())
            {
                <div class="row gy-4">

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                    <div class="col-lg-6">

                        <!-- start:wizrd -->

                        <div class="form-horizontal">
                            <div class="row form-horizontal">
                                <p>Please provide your basic information to get started.</p>
                                <hr />
                                @*@System.Globalization.RegionInfo.CurrentRegion.DisplayName*@
                                <div class="offset-md-1 col-md-5 p-2">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" })*@
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @required = "required", placeholder = Html.DisplayNameFor(model => model.FirstName) } })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-5 p-2">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label" })*@
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @required = "required", placeholder = Html.DisplayNameFor(model => model.LastName) } })
                                        </div>
                                    </div>
                                </div>


                                <div class="form-group p-2">
                                    @*@Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "control-label col-md-4" })*@
                                    <div class="offset-md-1 col-md-8">
                                        @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control", @required = "required", placeholder = Html.DisplayNameFor(model => model.EmailAddress) } })
                                    </div>
                                </div>

                                <div class="offset-md-1 col-md-5 p-2">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })*@
                                        <div class="col-md-10 position-relative">
                                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @required = "required", placeholder = Html.DisplayNameFor(model => model.Password) } })
                                            <i class="fa-solid fa-eye" id="eye"></i>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-5 p-2">
                                    <div class="form-group">
                                        @*@Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label" })*@
                                        <div class="col-md-10 position-relative">
                                            @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @autocomplete = "off", @class = "form-control", @required = "required", placeholder = Html.DisplayNameFor(model => model.ConfirmPassword) } })
                                            <i class="fa-solid fa-eye" id="eyeC"></i>

                                        </div>
                                    </div>
                                </div>


                            </div>
                            <div class="row form-horizontal py-3">
                                <p>Mailing address </p>
                                <hr />
                                <div class="offset-md-1 form-group">
                                    @*@Html.LabelFor(model => model.AddressLine1, htmlAttributes: new { @class = "control-label" })*@
                                    <div class="col-md-10 p-2">
                                        @Html.EditorFor(model => model.AddressDetails.FirstOrDefault().AddressLine1, new { htmlAttributes = new { @class = "form-control", @required = "required", placeholder = Html.DisplayNameFor(model => model.AddressDetails.FirstOrDefault().AddressLine1) } })
                                        @*@Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })*@
                                    </div>
                                </div>

                                <div class="offset-md-1 form-group ">
                                    @*@Html.LabelFor(model => model.AddressLine2, htmlAttributes: new { @class = "control-label" })*@
                                    <div class="col-md-10 p-2">
                                        @Html.EditorFor(model => model.AddressDetails.FirstOrDefault().AddressLine2, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.AddressDetails.FirstOrDefault().AddressLine2) } })
                                        @*@Html.ValidationMessageFor(model => model.AddressLine2, "", new { @class = "text-danger" })*@
                                    </div>
                                </div>
                                <div class="offset-md-1 col-md-5">
                                    <div class="form-group p-2">
                                        @*@Html.LabelFor(model => model.CityTown, htmlAttributes: new { @class = "control-label " })*@
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.AddressDetails.FirstOrDefault().CityTown, new { htmlAttributes = new { @class = "form-control", @required = "required", placeholder = Html.DisplayNameFor(model => model.AddressDetails.FirstOrDefault().CityTown) } })
                                            <select id="CityTownList" class="form-control pb-sm-3 hidden" name="CityTown" aria-label="District" required="required">
                                                <option>Select a District</option>>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group p-2">
                                        @*@Html.LabelFor(model => model.StateParish, htmlAttributes: new { @class = "control-label " })*@
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.AddressDetails.FirstOrDefault().StateParish, new { htmlAttributes = new { @class = "form-control", @required = "required", placeholder = Html.DisplayNameFor(model => model.AddressDetails.FirstOrDefault().StateParish) } })
                                            @Html.DropDownList("StateParish", ViewBag.Parishes as SelectList, "Select a parish", new { @class = "form-control", id = "StateParishList", @required = "required", @style = "display: none" })
                                            @*@Html.ValidationMessageFor(model => model.StateParish, "", new { @class = "text-danger" })*@
                                        </div>
                                    </div>
                                </div>

                                <div class="offset-md-1 col-md-5">
                                    <div class="form-group p-2">
                                        @*@Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label " })*@
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.AddressDetails.FirstOrDefault().ZipCode, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.AddressDetails.FirstOrDefault().ZipCode) } })
                                            @*@Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })*@
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group p-2">
                                        @*@Html.LabelFor(model => model.CountryCode, htmlAttributes: new { @class = "control-label " })*@
                                        <div class="col-md-10">
                                            @if (ViewBag.CountryList != null)
                                            {
                                                @*@Html.ValidationMessageFor(model => model.CountryCode, "", new { @class = "text-danger" })*@
                                                @Html.DropDownListFor(model => model.AddressDetails.FirstOrDefault().CountryCode, ViewBag.CountryList as List<SelectListItem>, "Select Country", new { @class = "form-control", @required = "required" })
                                            }
                                        </div>
                                    </div>
                                </div>

                                <div class="offset-md-1 form-group p-3">
                                    @*@Html.LabelFor(model => model.phone, htmlAttributes: new { @class = "control-label " })*@
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.AddressDetails.FirstOrDefault().Phone, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.AddressDetails.FirstOrDefault().Phone) } })
                                        @*@Html.ValidationMessageFor(model => model.phone, "", new { @class = "text-danger" })*@
                                    </div>
                                </div>
                                <hr>
                                <div class="form-group">
                                    @Html.EditorFor(model => model.PaymentDetails.FirstOrDefault().CardAmount, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.PaymentDetails.FirstOrDefault().CardAmount) } })
                                    <input type="hidden" id="originalAmount" />
                                    @Html.EditorFor(model => model.PaymentDetails.FirstOrDefault().Currency, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.PaymentDetails.FirstOrDefault().Currency) } })
                                    @Html.EditorFor(model => model.PaymentDetails.FirstOrDefault().SubType, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.PaymentDetails.FirstOrDefault().SubType) } })
                                    @Html.EditorFor(model => model.PaymentDetails.FirstOrDefault().RateDescription, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(model => model.PaymentDetails.FirstOrDefault().RateDescription) } })
                                    @*@Html.EditorFor(model => model.PaymentDetails.FirstOrDefault().RateTerm)*@
                                </div>

                            </div>


                        </div>

                        <!-- end:wizrd -->
                    </div>
                    <div class="col-lg-6">
                        <!-- start:wizrd -->
                        <div class="form-horizontal">
                            <p>Hi @(ViewBag.Name), choose from one of our subscription options</p>
                            <hr />
                            @*@Html.Partial("_Rates", Model)*@

                            <br />
                            <div id="search-form">
                                <div class="plans pb-3">
                                    <div class="row justify-content-md-center">
                                        <div class="col-lg-3 col-sm-4 p-2">@Html.RadioButtonFor(x => x.SubscriptionDetails.FirstOrDefault().RateType, "Epaper", htmlAttributes: new { @autocomplete = "off", @id = "ePaper" })<label for="ePaper">ePaper Edition</label></div>
                                        <div class="col-lg-3 col-sm-4 p-2">@Html.RadioButtonFor(x => x.SubscriptionDetails.FirstOrDefault().RateType, "Print", htmlAttributes: new { @autocomplete = "off", @id = "Print" })<label for="Print">Print Edition</label></div>
                                        <div class="col-lg-3 col-sm-4 p-2">@Html.RadioButtonFor(x => x.SubscriptionDetails.FirstOrDefault().RateType, "Bundle", htmlAttributes: new { @autocomplete = "off", @id = "Bundle" })<label for="Bundle">Print & ePaper Bundle</label></div>
                                    </div>
                                </div>
                                @* @Html.Action("GetRatesList", "Account")*@
                            </div>
                            <div class="container pb-3" id="rates-results" style="display:none;">
                                <p>Loading...</p>

                            </div>
                            @Html.HiddenFor(m => m.SubscriptionDetails.FirstOrDefault().RateID, new { @class = ".do-not-ignore" })

                            <div class="form-group p-2" id="del-address" style="display: none">
                                <hr />
                                <div class="row justify-content-md-center">
                                    <div class="col-lg-12">
                                        <button type="button" class="btn-sign-in" data-bs-toggle="modal" data-bs-target="#delivery-address">Add delivery address</button>
                                        <div id="del-address-details" style="display:none;"></div>
                                    </div>
                                </div>
                            </div>

                            <div id="delAddressDetails"> </div>

                            <div class="form-group p-2" id="del-instructions" style="display: none">
                                @Html.LabelFor(model => model.SubscriptionDetails.FirstOrDefault().DeliveryInstructions, htmlAttributes: new { @class = "form-label " })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.SubscriptionDetails.FirstOrDefault().DeliveryInstructions, new { htmlAttributes = new { @class = "form-control", @rows = 5 } })
                                </div>
                                <hr />

                            </div>

                            <div class="form-group p-2">
                                @Html.LabelFor(model => model.SubscriptionDetails.FirstOrDefault().StartDate, htmlAttributes: new { @class = "control-label fw-bold hidden" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.SubscriptionDetails.FirstOrDefault().StartDate, "", new { htmlAttributes = new { @class = "form-control hidden", maxlength = 10, @required = "required" } })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="row">
                                    <div class="col-md-4 p-3">
                                        <div class="form-check">
                                            @Html.EditorFor(model => model.SubscriptionDetails.FirstOrDefault().NewsletterSignUp, new { htmlAttributes = new { @class = "form-check-input" } })
                                            @Html.LabelFor(model => model.SubscriptionDetails.FirstOrDefault().NewsletterSignUp, htmlAttributes: new { @class = "form-check-label" })
                                        </div>
                                    </div>
                                    <div class="col-md-8 p-3">
                                        <div class="form-check">
                                            @Html.EditorFor(model => model.SubscriptionDetails.FirstOrDefault().NotificationEmail, new { htmlAttributes = new { @class = "form-check-input" } })
                                            @Html.LabelFor(model => model.SubscriptionDetails.FirstOrDefault().NotificationEmail, htmlAttributes: new { @class = "form-check-label" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            


                            <input type="hidden" id="AddressAdded" />
                            <!-- end:wizrd -->
                            <!-- Delivery Modal -->
                            

                            <!-- end: Delivery Modal -->
                        </div>
                    </div>

                </div>
                <p>here</p>
                <div class="form-group">
                    <div class=" col-md-12 pt-3">
                        <div class="row">
                            <div class="col-12">
                                <input type="submit" value="Redeem Coupon" name="nextBtn" id="nextBtn" class="btn btn-sign-in bx-pull-left" />
                            </div>
                        </div>

                    </div>
                </div>
            }
        </div>
</section><!-- End Wizard Section -->

</div>
@section scripts{
    <script>
         const passwordInput = $("#Password");
        const passwordConfirmInput = $("#ConfirmPassword");
        const eye = $("#eye");
        const eyeC = $("#eyeC");

        $(eye).click(function() {
          $(this).toggleClass("fa-eye-slash");
          const type = $(passwordInput).attr("type") === "password" ? "text" : "password";
          $(passwordInput).attr("type", type);
        });

        $(eyeC).click(function() {
          $(this).toggleClass("fa-eye-slash");
          const typeC = $(passwordConfirmInput).attr("type") === "password" ? "text" : "password";
          $(passwordConfirmInput).attr("type", typeC);
        });


        let rateType;

            $('[name=subdetails]').submit(function (event) {

                let rateType = $('[name=RateType]:checked').val();
                let deliveryAddress = $("#AddressAdded").val();

                 if(!$('[name=RateType]').is(':checked')) {

                   swal({
                      title: "Error!",
                       text: "Please select a subscription plan to proceed",
                      type: "warning",
                      dangerMode: true
                   });

                    return false;
                }

                if (rateType != "Epaper" && !deliveryAddress ) {
                    swal({
                      title: "Error!",
                       text: "Please enter a delivery address to proceed",
                      type: "warning",
                      dangerMode: true
                   });

                    return false;
                }

                if ($('[name=RateType]').is(':checked')) {
                     let formData = $("[name=subdetails]").valid();
                     if (formData) {
                         $('#loading').addClass('loading').removeClass('hidden');
                    }
                }
              });

            $("[name='StartDate']").on('change', function (e) {

                let givenDate = $(this).val();
                givenDate = moment(givenDate);

                if (givenDate.isBefore(currentDate)) {
                    swal({
                        title: "Error!",
                        text: "Please select a subscription date in the future or today",
                        type: "warning",
                        dangerMode: true
                    });

                    $(this).val(currentDate);

                    return false;
                } else {
                    let splitDate = $(this).val().split('-');
                    let summaryDateText = ': ' + givenDate.format('DD/MM/yyyy');
                    $("#subStartDate").html(summaryDateText);
                }
                    
            });

            $('[name="RateType"]').on("click", function () {

                today = moment();
                console.log(today.format('YYYY-MM-DD'), ' day: ', today.isoWeekday(), ' hr: ', today.hours());

                rateType = $(this).val();
                //console.log($(this).val());
                if (rateType != "Epaper") {
                    $("#subtypedesc").html(rateType.toLowerCase());
                    $("[name='StartDate']").removeClass('hidden');
                    $("[for='StartDate']").removeClass('hidden');
                    // if (today is fri) and time of day <=  10am
                    today = moment();
                    if (today.isoWeekday() === 5 && today.hours() <= 10) {
                      currentDate = today.add(1, 'days').format('YYYY-MM-DD');
                    } else {
                      currentDate = today.add(2, 'days').format('YYYY-MM-DD');
                    }
                    //If (today is sat or sun)
                    today = moment();
                    if (today.isoWeekday() >= 6) {
                      currentDate = moment().isoWeekday(2).format('YYYY-MM-DD');
                    }
                    //if (today is a mon, tues, wed or thur) and time of day <= 11am
                    today = moment();
                    if (today.isoWeekday() <= 4 && today.hours() <= 11) {
                      currentDate = today.add(1, 'days').format('YYYY-MM-DD');
                    } else {
                      currentDate = today.add(2, 'days').format('YYYY-MM-DD');
                    }

                    $("[name='StartDate']").val(currentDate);

                    $("#del-address").show();
                    $("#del-instructions").show();
                    $("#deliveryAddressForm").show();
                    $("#deliveryAddressForm :input:not(#DeliveryAddress_AddressLine2):not([name=SameAsMailing])").attr("required", "required");
                } else {
                    $("#subtypedesc").html('ePaper');
                    $("[name='StartDate']").addClass('hidden');
                    $("[for='StartDate']").addClass('hidden');
                    currentDate = today.format('YYYY-MM-DD');

                    $("[name='StartDate']").val(currentDate);

                    $("#del-address").hide();
                    $("#del-instructions").hide();
                    $("#deliveryAddressForm").hide();
                    $("#deliveryAddressForm :input:not(#DeliveryAddress_AddressLine2):not([name=SameAsMailing])").removeAttr('required');
                }

                $("[name=StartDate]").trigger("change");

            });

            $("[name='RateType']").click(function (e) {
                $("#rates-results").show();
                var rateType = $(this).val();
                e.preventDefault();
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetRatesListAdmin", "Account")',
                    data: { rateType: rateType },
                    success: function (result) {
                        //console.log(result);
                        $("#rates-results").html(result);
                        $("input[name='RateType'][value=" + rateType + "]").prop('checked', true);

                        //if (preRate) {
                        //    setTimeout(
                        //        selectRate
                        //        , 500);
                        //}
                    }
                });
            });
        // Event delegation, waits until the elements are loaded on the page
            $("#rates-results").on("click", "[name=RateID]", function (e) {
                let rateDesc = $(this).parent().children().children().first().text();
                let plan = e.target.dataset;
                var desc = rateDesc.split("|")[0];
                var freq = rateDesc.split("|")[1];

                var frequency = rateDesc.split("|")[1] ? '<small>' + rateDesc.split("|")[1] + '</small>' : '';
                let rateType = plan.rateType + '|' + desc + '|' + plan.rateDesc + '|' + plan.ratePrice + '|' + freq;
                let rateId = plan.subId;

                console.log('rateDesc', rateDesc);
                $('#RateDescription').val(rateDesc);
                console.log(plan.rateType);
                $('#SubType').val(plan.rateType);
                console.log(desc);
                console.log(rateId);
                $('#RateID').val(rateId);
                console.log(plan.subId);
                console.log(plan.rateDesc);
                console.log(plan.ratePrice);
                $('#Currency').val(plan.ratePrice.split(" ")[0]);
                $('#CardAmount').val(plan.ratePrice.split("$")[1]);


                @*$.ajax({
                    type: "POST",
                    url: '@Url.Action("PreloadSubscription", "Home")',
                    data: { rateType: rateType, rateId: rateId },
                    success: function (result) {
                        var html = '<strong>' + plan.rateType.toUpperCase() + ' SUBSCRIPTION</strong><br />' + desc + '<br />' + frequency + '<p class="pt-1 text-success fw-semibold fs-3">' + plan.ratePrice + '</p>';
                        $("#subSummary").html(html);
                    }
                });*@
            });


            $("[name=deliveryAddressForm]").on('submit', function (e) {
                e.preventDefault();
                let formData = $("[name=deliveryAddressForm]").valid();

                if (formData) {
                    //Serialize the form datas.   
                    var addressData = $("[name=deliveryAddressForm] :input").serialize();
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("SaveDeliveryAddress", "Account")',
                        dataType: 'json',
                        data: addressData,
                        success: function (result) {
                            sessionStorage.setItem("delAddress", JSON.stringify(result));
                            var addressLine2 = result.AddressLine2 ? `${result.AddressLine2}<br>` : '';
                            var html = `<p class="p-3">${result.AddressLine1}<br>
                                            ${addressLine2}
                                            ${result.CityTown}<br>
                                            ${result.StateParish}<br>
                                        </p>`;
                            $("#AddressAdded").val("added");
                            $("#delAddressDetails").html(html);
                        }
                    });
                }

            });
    </script>
}